Shader "Unlit/ShieldShader"
{
    Properties
    {
        _MainTex ("Texture", 2D) = "white" {}
        [HDR]_TintColor ("Colorize", Color) = (1,1,1,1)
        _Multiplyer ("Glow Intence", float) = 1.5
        _HitOverlayArea ("Hit Area", Range(-1,1)) = 1
        _HitOverlayValue("Hit Value", Range(0,20)) = 1
        [HDR]_HitColor ("Hit Color", Color) = (1,1,1,1)
        _InpactPoint("Inpact Direction", Vector) = (1,1,1,0) 
    }
    SubShader
    {
        Tags { "RenderType"="Opaque" "Queue"="Transparent"}
        Pass
        {
            Blend SrcAlpha OneMinusSrcAlpha
            Cull front
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"
    
            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 normal : NORMAL;
            };
    
            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float3 normal : NORMAL;
            };
    
            sampler2D _MainTex;
            float _HitOverlayArea;
            float _HitOverlayValue;
            float4 _HitColor;
            float3 _InpactPoint;
            
            v2f vert (appdata v)
            {
                v2f o;
                o.normal = v.normal;
                o.uv = v.uv;                    
                o.vertex = UnityObjectToClipPos(v.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {                    
                fixed4 col = lerp(0, _HitColor, saturate(max(0,dot(normalize(_InpactPoint),i.normal)+_HitOverlayArea)*_HitOverlayValue));
                return col;
            }
            ENDCG
        }

        Pass
        {
            Blend SrcAlpha OneMinusSrcAlpha
            CGPROGRAM
            #pragma vertex vert
            #pragma fragment frag
            #include "UnityCG.cginc"

            struct appdata
            {
                float4 vertex : POSITION;
                float2 uv : TEXCOORD0;
                float3 normal : NORMAL;
            };

            struct v2f
            {
                float2 uv : TEXCOORD0;
                float4 vertex : SV_POSITION;
                float areal : COLOR0;
                float3 normal : COLOR1;
            };

            sampler2D _MainTex;
            float4 _TintColor;
            float _Multiplyer;
            float _HitOverlayArea;
            float _HitOverlayValue;
            float4 _HitColor;
            float3 _InpactPoint;
            
            v2f vert (appdata v)
            {
                v2f o;                
                
                o.uv = v.uv;
                float3 worldPos = mul(unity_ObjectToWorld, v.vertex).xyz;
                float3 viewDir = _WorldSpaceCameraPos.xyz - worldPos;
                o.areal = max(0,dot(normalize(viewDir), v.normal));
                o.normal = UnityObjectToWorldNormal(v.normal);
                
                o.vertex = UnityObjectToClipPos(v.vertex);
                return o;
            }

            fixed4 frag (v2f i) : SV_Target
            {
                fixed4 col = tex2D (_MainTex, i.uv);
                i.areal = (1-i.areal);
                col *= i.areal*_TintColor*_Multiplyer+_HitOverlayValue/20;
                col.a = i.areal*_TintColor.a;
                col = lerp(col, _HitColor, saturate(max(0,dot(normalize(_InpactPoint),i.normal)+_HitOverlayArea)*_HitOverlayValue));
                return col;
            }
            ENDCG
        }      
        
    }
}
